(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{324:function(v,_,t){v.exports=t.p+"assets/img/application-dependency.6d6bc37c.png"},333:function(v,_,t){"use strict";t.r(_);var e=t(33),c=Object(e.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"六、工程结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#六、工程结构"}},[v._v("#")]),v._v(" 六、工程结构")]),v._v(" "),e("h2",{attrs:{id:"一-应用分层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-应用分层"}},[v._v("#")]),v._v(" (一) 应用分层")]),v._v(" "),e("ol",[e("li",[e("p",[v._v("【推荐】图中默认上层依赖于下层，箭头关系表示可直接依赖，如：开放接口层可以依赖于 Web 层，也可以直接依赖于Service层，依此类推：\n"),e("img",{attrs:{src:t(324),alt:"An image"}})]),v._v(" "),e("ul",[e("li",[e("p",[v._v("开放接口层：可直接封装Service方法暴露成RPC接口；通过Web封装成http接口；网关控制层等。")])]),v._v(" "),e("li",[e("p",[v._v("终端显示层：各个端的模板渲染并执行显示的层。当前主要是velocity渲染，JS渲染，JSP渲染，移动端展示等。")])]),v._v(" "),e("li",[e("p",[v._v("Web层：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。")])]),v._v(" "),e("li",[e("p",[v._v("Service层：相对具体的业务逻辑服务层。")])]),v._v(" "),e("li",[e("p",[v._v("Manager层：通用业务处理层，它有如下特征：")]),v._v(" "),e("p",[v._v("1 ） 对第三方平台封装的层，预处理返回结果及转化异常信息。")]),v._v(" "),e("p",[v._v("2 ） 对Service层通用能力的下沉，如缓存方案、中间件通用处理。")]),v._v(" "),e("p",[v._v("3 ） 与DAO层交互，对多个DAO的组合复用。")])]),v._v(" "),e("li",[e("p",[v._v("DAO层：数据访问层，与底层 MySQL、Oracle、Hbase、OB 等进行数据交互。")])]),v._v(" "),e("li",[e("p",[v._v("外部接口或第三方平台：包括其它部门 RPC 开放接口，基础平台，其它公司的 HTTP 接口。")])])])]),v._v(" "),e("li",[e("p",[v._v("【参考】（分层异常处理规约）在DAO层，产生的异常类型有很多，无法用细粒度的异常进行 catch，使用"),e("code",[v._v("catch(Exception e)")]),v._v("方式，并"),e("code",[v._v("throw new DAOException(e)")]),v._v("，不需要打印日志，因为日志在"),e("code",[v._v("Manager/Service")]),v._v("层一定需要捕获并打印到日志文件中去，如果同台服务器再打日志，浪费性能和存储。在Service层出现异常时，必须记录出错日志到磁盘，尽可能带上参数信息，相当于保护案发现场。Manager层与Service同机部署，日志方式与DAO层处理一致，如果是单独部署，则采用与Service一致的处理方式。Web层绝不应该继续往上抛异常，因为已经处于顶层，如果意识到这个异常将导致页面无法正常渲染，那么就应该直接跳转到友好错误页面，尽量加上友好的错误提示信息。开放接口层要将异常处理成错误码和错误信息方式返回。")])]),v._v(" "),e("li",[e("p",[v._v("【参考】分层领域模型规约：")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("DO（Data Object）")]),v._v("：此对象与数据库表结构一一对应，通过"),e("code",[v._v("DAO")]),v._v("层向上传输数据源对象。")]),v._v(" "),e("li",[e("code",[v._v("DTO（Data Transfer Object）")]),v._v("：数据传输对象，Service或Manager向外传输的对象。")]),v._v(" "),e("li",[e("code",[v._v("BO（Business Object）")]),v._v("：业务对象，可以由Service层输出的封装业务逻辑的对象。")]),v._v(" "),e("li",[e("code",[v._v("Query")]),v._v("：数据查询对象，各层接收上层的查询请求。注意超过 "),e("code",[v._v("2")]),v._v(" 个参数的查询封装，"),e("strong",[v._v("禁止")]),v._v("使用 "),e("code",[v._v("Map")]),v._v(" 类来传输。")]),v._v(" "),e("li",[e("code",[v._v("VO（View Object）")]),v._v("：显示层对象，通常是Web向模板渲染引擎层传输的对象。")])])])]),v._v(" "),e("h2",{attrs:{id:"二-二方库依赖"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-二方库依赖"}},[v._v("#")]),v._v(" (二) 二方库依赖")]),v._v(" "),e("ol",[e("li",[e("p",[v._v("【强制】定义GAV遵从以下规则：\n1 ） "),e("strong",[v._v("GroupID格式")]),v._v("："),e("code",[v._v("com.{公司/BU }.业务线[.子业务线]")]),v._v("，最多 "),e("code",[v._v("4")]),v._v(" 级。")]),v._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[v._v("说明：")]),v._v(" "),e("p",[e("code",[v._v("{公司/BU}")]),v._v(" 例如：alibaba/taobao/tmall/aliexpress等BU一级；子业务线可选。")])]),v._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[v._v("正例：")]),v._v(" "),e("p",[e("code",[v._v("com.taobao.jstorm")]),v._v(" 或 "),e("code",[v._v("com.alibaba.dubbo.register")])])]),v._v(" "),e("p",[v._v("2 ） "),e("strong",[v._v("ArtifactID格式")]),v._v("："),e("code",[v._v("产品线名-模块名")]),v._v("。语义不重复不遗漏，先到中央仓库去查证一下。")]),v._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[v._v("正例：")]),v._v(" "),e("p",[e("code",[v._v("dubbo-client")]),v._v(" / "),e("code",[v._v("fastjson-api")]),v._v(" / "),e("code",[v._v("jstorm-tool")])])]),v._v(" "),e("p",[v._v("3 ） "),e("strong",[v._v("Version")]),v._v("：详细规定参考下方。")])]),v._v(" "),e("li",[e("p",[v._v("【强制】"),e("strong",[v._v("二方库版本号命名方式")]),v._v("："),e("code",[v._v("主版本号.次版本号.修订号")])]),v._v(" "),e("p",[v._v("1 ）"),e("strong",[v._v("主版本号")]),v._v("：产品方向改变，或者大规模API不兼容，或者架构不兼容升级。")]),v._v(" "),e("p",[v._v("2 ）"),e("strong",[v._v("次版本号")]),v._v("：保持相对兼容性，增加主要功能特性，影响范围极小的API不兼容修改。")]),v._v(" "),e("p",[v._v("3 ）"),e("strong",[v._v("修订号")]),v._v("：保持完全兼容性，修复BUG、新增次要功能特性等。")]),v._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[v._v("说明：")]),v._v(" "),e("p",[v._v("注意起始版本号必须为：1.0.0，而不是0.0.1。")])]),v._v(" "),e("div",{staticClass:"custom-block danger"},[e("p",{staticClass:"custom-block-title"},[v._v("反例：")]),v._v(" "),e("p",[v._v("仓库内某二方库版本号从1.0.0.0开始，一直默默“升级”成1.0.0.64，完全失去版本的语义信息。")])])]),v._v(" "),e("li",[e("p",[v._v("【强制】线上应用不要依赖 "),e("code",[v._v("SNAPSHOT")]),v._v(" 版本（安全包除外）；正式发布的类库必须先去中央仓库进行查证，使 "),e("code",[v._v("RELEASE")]),v._v(" 版本号有延续性，且版本号不允许覆盖升级。")]),v._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[v._v("说明：")]),v._v(" "),e("p",[v._v("不依赖 "),e("code",[v._v("SNAPSHOT")]),v._v(" 版本是保证应用发布的幂等性。另外，也可以加快编译时的打包构建。")])])]),v._v(" "),e("li",[e("p",[v._v("【强制】二方库的新增或升级，保持除功能点之外的其它 "),e("code",[v._v("jar")]),v._v(" 包仲裁结果不变。如果有改变，必须明确评估和验证。")]),v._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[v._v("说明：")]),v._v(" "),e("p",[v._v("在升级时，进行 "),e("code",[v._v("dependency:resolve")]),v._v(" 前后信息比对，如果仲裁结果完全不一致，那么通过 "),e("code",[v._v("dependency:tree")]),v._v("命令，找出差异点，进行"),e("code",[v._v("<exclude>")]),v._v("排除jar包。")])])]),v._v(" "),e("li",[e("p",[v._v("【强制】二方库里可以定义枚举类型，参数可以使用枚举类型，但是接口返回值不允许使用枚举类型或者包含枚举类型的POJO对象。")])]),v._v(" "),e("li",[e("p",[v._v("【强制】依赖于一个二方库群时，必须定义一个统一的版本变量，避免版本号不一致。")]),v._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[v._v("说明：")]),v._v(" "),e("p",[v._v("依赖"),e("code",[v._v("springframework-core")]),v._v(","),e("code",[v._v("-context")]),v._v(","),e("code",[v._v("-beans")]),v._v("，它们都是同一个版本，可以定义一个变量来保存版本："),e("code",[v._v("${spring.version}")]),v._v("，定义依赖的时候，引用该版本。")])])]),v._v(" "),e("li",[e("p",[v._v("【强制】禁止在子项目的"),e("code",[v._v("pom依赖")]),v._v("中出现"),e("strong",[v._v("相同")]),v._v("的"),e("code",[v._v("GroupId")]),v._v("，"),e("strong",[v._v("相同")]),v._v("的"),e("code",[v._v("ArtifactId")]),v._v("，但是"),e("strong",[v._v("不同")]),v._v("的"),e("code",[v._v("Version")]),v._v("。")]),v._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[v._v("说明：")]),v._v(" "),e("p",[v._v("在本地调试时会使用各子项目指定的版本号，但是合并成一个war，只能有一个版本号出现在最后的lib目录中。曾经出现过线下调试是正确的，发布到线上却出故障的先例。")])])]),v._v(" "),e("li",[e("p",[v._v("【推荐】底层基础技术框架、核心数据管理平台、或近硬件端系统谨慎引入第三方实现。")])]),v._v(" "),e("li",[e("p",[v._v("【推荐】所有pom文件中的依赖声明放在"),e("code",[v._v("<dependencies>")]),v._v("语句块中，所有版本仲裁放在 "),e("code",[v._v("<dependencyManagement>")]),v._v("语句块中。")]),v._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[v._v("说明：")]),v._v(" "),e("p",[e("code",[v._v("<dependencyManagement>")]),v._v("里只是声明版本，并不实现引入，因此子项目需要显式的声明依赖，version和scope都读取自父pom。而"),e("code",[v._v("<dependencies>")]),v._v("所有声明在主pom的"),e("code",[v._v("<dependencies>")]),v._v("里的依赖都会自动引入，并默认被所有的子项目继承。")])])]),v._v(" "),e("li",[e("p",[v._v("【推荐】二方库不要有配置项，最低限度不要再增加配置项。")])]),v._v(" "),e("li",[e("p",[v._v("【推荐】不要使用不稳定的工具包或者Utils类。")]),v._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[v._v("说明：")]),v._v(" "),e("p",[v._v("不稳定指的是提供方无法做到向下兼容，在编译阶段正常，但在运行时产生异常，因此，尽量使用业界稳定的二方工具包。")])])]),v._v(" "),e("li",[e("p",[v._v("【参考】为避免应用二方库的依赖冲突问题，二方库发布者应当遵循以下原则：\n1 ） "),e("strong",[v._v("精简可控原则")]),v._v(" 。移除一切不必要的API和依赖，只包含 Service API、必要的领域模型对象、Utils类、常量、枚举等。如果依赖其它二方库，尽量是provided引入，让二方库使用者去依赖具体版本号；无log具体实现，只依赖日志框架。\n2 ） "),e("strong",[v._v("稳定可追溯原则")]),v._v(" 。每个版本的变化应该被记录，二方库由谁维护，源码在哪里，都需要能方便查到。除非用户主动升级版本，否则公共二方库的行为不应该发生变化。")])])]),v._v(" "),e("h2",{attrs:{id:"三-服务器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-服务器"}},[v._v("#")]),v._v(" (三) 服务器")]),v._v(" "),e("ol",[e("li",[v._v("【推荐】高并发服务器建议调小TCP协议的time_wait超时时间。"),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[v._v("说明：")]),v._v(" "),e("p",[v._v("操作系统默认 240 秒后，才会关闭处于time_wait状态的连接，在高并发访问下，服务器端会因为处于time_wait的连接数太多，可能无法建立新的连接，所以需要在服务器上调小此等待值。")])]),v._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[v._v("正例：")]),v._v(" "),e("p",[v._v("在linux服务器上请通过变更/etc/sysctl.conf文件去修改该缺省值（秒）：")]),v._v(" "),e("p",[e("code",[v._v("net.ipv4.tcp_fin_timeout = 30")])])])]),v._v(" "),e("li",[v._v("【推荐】调大服务器所支持的最大文件句柄数（File Descriptor，简写为fd）。"),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[v._v("说明：")]),v._v(" "),e("p",[v._v("主流操作系统的设计是将"),e("code",[v._v("TCP/UDP")]),v._v("连接采用与文件一样的方式去管理，即一个连接对应于一个fd。主流的linux服务器默认所支持最大fd数量为 "),e("code",[v._v("1024")]),v._v(" ，当并发连接数很大时很容易因为fd不足而出现“open too many files”错误，导致新的连接无法建立。建议将linux服务器所支持的最大句柄数调高数倍（与服务器的内存数量相关）。")])])]),v._v(" "),e("li",[v._v("【推荐】给"),e("code",[v._v("JVM")]),v._v("环境参数设置"),e("code",[v._v("-XX:+HeapDumpOnOutOfMemoryError")]),v._v("参数，让"),e("code",[v._v("JVM")]),v._v("碰到"),e("code",[v._v("OOM")]),v._v("场景时输出"),e("code",[v._v("dump")]),v._v("信息。"),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[v._v("说明：")]),v._v(" "),e("p",[v._v("OOM的发生是有概率的，甚至相隔数月才出现一例，出错时的堆内信息对解决问题非常有帮助。")])])]),v._v(" "),e("li",[v._v("【推荐】在线上生产环境，JVM的"),e("code",[v._v("Xms")]),v._v("和"),e("code",[v._v("Xmx")]),v._v("设置一样大小的内存容量，避免在GC 后调整堆大小带来的压力。")]),v._v(" "),e("li",[v._v("【参考】"),e("strong",[v._v("服务器内部重定向")]),v._v("必须使用"),e("code",[v._v("forward")]),v._v("；"),e("strong",[v._v("外部重定向")]),v._v("地址必须使用"),e("code",[v._v("URL Broker")]),v._v("生成，否则因线上采用"),e("code",[v._v("HTTPS")]),v._v("协议而导致浏览器提示“不安全“。此外，还会带来URL维护不一致的问题。")])])])}),[],!1,null,null,null);_.default=c.exports}}]);